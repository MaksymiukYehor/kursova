namespace Lab1
{
    using System;
    using System.Linq;

    public abstract class Game
    {
        private int[,] board = new int[9, 9];
        private Random random = new Random();
        public GameAccount Player { get; }
        public string type { get; set; };
        public bool Result { get; set; };
        private int id { get; set; };
        private int rating;
        public int Rating
        {
           get
            {
                return rating;
            }
            set
            {
                if (value < 0)
                {
                    throw new ArgumentException("Рейтинг не може бути менше нуля.");
                }
                else
                {
                    rating = value;
                }
            } 
        }

        public Game(string type, GameAccount Player)
        {
            ID = ++id;
            Type = type;
            player = Player;
            Result = result;
            GenerateBoard();
        }

        private void GenerateBoard()
        {
            FillBoard(0, 0);
            RemoveNumbersFromBoard();
        }

        public abstract void RemoveNumsFromBoard();
        public abstract int GetRating();

        private void DisplayBoard()
        {
            for (int i = 0; i < 9; i++)
            {
                if (i % 3 == 0 && i != 0) Console.WriteLine("------+-------+------");
                for (int j = 0; j < 9; j++)
                {
                    if (j % 3 == 0 && j != 0) Console.Write("| ");
                    Console.Write(board[i, j] == 0 ? ". " : board[i, j] + " ");
                }
                Console.WriteLine();
            }
        }

        private bool IsMoveValid(int row, int col, int num)
        {
            if (board[row, col] != 0) return false;

            for (int i = 0; i < 9; i++)
            {
                if (board[row, i] == num || board[i, col] == num) return false;
            }

            int startRow = (row / 3) * 3;
            int startCol = (col / 3) * 3;

            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    if (board[startRow + i, startCol + j] == num) return false;
                }
            }
            return true;
        }

        private bool IsBoardFull()
        {
            foreach (var cell in board)
            {
                if (cell == 0) return false;
            }
            return true;
        }
    }

    //похідні класи
    public class HardGame : Game
    {
        public HardGame(GameAccount Player) : base(Player, "Hard") 
        {
            GetRating();
            if (Result)
            {
                Player.WinGame
            }
            else
            {
                Player.LoseGame
            };
        }
        public override void RemoveNumsFromBoard()
        {
            int cellsToRemove = random.Next(40, 50);

            for (int i = 0; i < cellsToRemove; i++)
            {
                int row, col;

                do
                {
                    row = random.Next(0, 9);
                    col = random.Next(0, 9);
                } while (board[row, col] == 0);

                board[row, col] = 0;
            }
        }
        public override int GetRating()
        {
            Rating = 50;
            return Rating;
        }
    }

    public class EasyGame : Game
    {
        public EasyGame(GameAccount Player) : base(Player, "Easy")
        {
            GetRating();
            if (Result) { Player.WinGame }
            else { Player.LoseGame };
        }
        public override void RemoveNumsFromBoard()
        {
            int cellsToRemove = random.Next(20, 30);

            for (int i = 0; i < cellsToRemove; i++)
            {
                int row, col;

                do
                {
                    row = random.Next(0, 9);
                    col = random.Next(0, 9);
                } while (board[row, col] == 0);

                board[row, col] = 0;
            }
        }
        public override int GetRating()
        {
            Rating = 50;
            return Rating;
        }
    }
}

using Lab1;
using System;
using System.Collections.Generic;

namespace Lab1
{
    public abstract class GameAccount
    {
        public string UserName { get; set; }
        private string password { get; }
        private int currentRating = 1;
        public int CurrentRating
        {
            get
            {
                return currentRating;
            }
            set
            {
                if (value < 1)
                {
                    currentRating = 1;
                }
                else
                {
                    currentRating = value;
                }

            }
        }
        public int GamesCount => gamesHistory.Count;
        private readonly List<Game> gamesHistory;

        public GameAccount(string userName, string password)
        {
            UserName = userName;
            Password = password;
            gamesHistory = new List<Game>();
        }

        public override void CalculateRating(Game game)
        {
            if (game.result)
            {
                CurrentRating += game.Rating;
            }
            else
            {
                CurrentRating -= game.Rating;
            }
        }
    }
}

using Lab1;
using System;

namespace Factory
{
    public static class GameFactory
    {
        public static Game CreateGame(string type, AuthSystem.)
        {
            return type switch
            {
                "Hard" => new HardGame(Player),
                "Easy" => new EasyGame(Player),
                _ => throw new ArgumentException("Unknown game type")
            };
        }
    }
}

using Lab1;

public class PlayerRepository : IPlayerRepository
{
    private readonly DbContext _dbContext;

    public PlayerRepository(DbContext dbContext)
    {
        _dbContext = dbContext;
    }

    public void CreateAcc(GameAccount player)
    {
        _dbContext.Players.Add(player);
    }
    /*
    public IEnumerable<GameAccount> ReadAll()
    {
        return _dbContext.Players;
    }

    public GameAccount ReadById(string userName)
    {
        return _dbContext.Players.Find(account => account.UserName == userName);
    }
    */
    /*
    public void Update(GameAccount player)
    {
        var existingPlayer = ReadById(player.UserName);
        if (existingPlayer != null)
        {
            existingPlayer.CurrentRating = player.CurrentRating;
        }
    }

    public void Delete(string userName)
    {
        var player = ReadById(userName);
        if (player != null)
        {
            _dbContext.Players.Remove(player);
        }
    }
    */

    public IEnumerable<Game> GetAccHistory(string userName)
    {
        return _dbContext.Games.Where(g => g.Winner.UserName == userName || g.Loser.UserName == userName);
    }

    bool Exists(string userName)
    {
        return Players.Any (p => p.UserName == userName);
    }

    public GameAccount FindByUsername(string userName)
    {
        return Players.FirstOrDefault (p => p.UserName == userName);
    }
}

public class GameRepository : IGameRepository
{
    private readonly DbContext _dbContext;

    public GameRepository(DbContext dbContext)
    {
        _dbContext = dbContext;
    }

    public void PlayGame(string type)
    {
        

        _dbContext.Games.Add(game);
    }

    public IEnumerable<Game> ReadAll()
    {
        return _dbContext.Games;
    }

    public Game ReadById(int gameId)
    {
        return _dbContext.Games.Find(g => g.GameID == gameId);
    }

    public void Update(Game game)
    {
        var existingGame = ReadById(game.GameID);
        if (existingGame != null)
        {
            existingGame.Rating = game.Rating;
        }
    }

    public void Delete(int gameId)
    {
        var game = ReadById(gameId);
        if (game != null)
        {
            _dbContext.Games.Remove(game);
        }
    }
}

using Lab1;


public class PlayerService : IPlayerService
{
    private readonly IPlayerRepository _repository;
    private Player _currentPlayer;

    public PlayerService(IPlayerRepository repository)
    {
        _repository = repository;
    }

    public void CreateAccount(GameAccount player)
    {
        if (_repository.Exists(player.Username))
        {
            throw new Exception("Користувач з таким іменем вже існує.");
        }

        _repository.CreateAcc(player);
    }

    /*
    public IEnumerable<GameAccount> GetAllAccounts()
    {
        return _repository.ReadAll();
    }
    */

    /*
    public GameAccount GetAccountById(string userName)
    {
        return _repository.ReadById(userName);
    }
    */

    public IEnumerable<Game> GetAccHistory(GameAccount player)
    {
        return _repository.GetAccHistory(userName);
    }

    public bool Register(string username, string password)
    {
        if (_repository.Exists(username))
        {
            throw new Exception("Користувач з таким логіном вже існує.");
        }

        _repository.Add(new Player(username, password));
        Console.WriteLine("Реєстрація успішна!");
        return true;
    }

    public bool Login(string username, string password)
    {
        var player = _repository.FindByUsername(username);

        if (player != null && player.Password == password)
        {
            _currentPlayer = player;
            Console.WriteLine($"Ласкаво просимо, {username}!");
            return true;
        }

        Console.WriteLine("Неправильний логін або пароль.");
        return false;
    }

    public void Logout()
    {
        _currentPlayer = null;
        Console.WriteLine("Ви вийшли з облікового запису.");
    }
}

public class GameService : IGameService
{
    private readonly IGameRepository _repository;

    public GameService(IGameRepository repository)
    {
        _repository = repository;
    }

    public void PlayGame(string type)
    {
        _repository.CreateGame(string type);
    }

    /*
    public IEnumerable<Game> GetAllGames()
    {
        return _repository.ReadAll();
    }
    */
    /*
    public Game GetGameById(int gameId)
    {
        return _repository.ReadById(gameId);
    }
    */
}

using Lab1;

//service interface
public interface IPlayerService
{
    void CreateAccount(GameAccount player);
    bool Register(string userName, string password);
    bool Login(string userName, string password);
    void Logout();    
    //IEnumerable<GameAccount> GetAllAccounts();

    //GameAccount GetAccountById(string userName);

    IEnumerable<Game> GetAccHistory(GameAccount player);
}

public interface IGameService
{
    void PlayGame(string type, GameAccount player);

    //IEnumerable<Game> GetAllGames();

    //Game GetGameById(int gameId);
}


//repo interface
public interface IPlayerRepository
{
    void CreateAcc(GameAccount player);

    //IEnumerable<GameAccount> ReadAll();
    //GameAccount ReadById(string userName);
    //void Update(GameAccount player);
    //void Delete(string userName);
    IEnumerable<Game> GetAccHistory(string userName);
    boll Exists(string userName);
    GameAccount FindByUsername(string userName);
}

public interface IGameRepository
{
    void PlayGame(string type);

    //IEnumerable<Game> ReadAll();

    //Game ReadById(int id);

    void Update(Game game);
    void Delete(int id);
}

public interface ICommand
{
    void Execute();
    string Description { get; }
}

using Lab1;
using System;
using System.Collections.Generic;
public class DbContext
{
    public List<Game> Games { get; set; }
    public List<GameAccount> Players { get; set; }

    public DbContext()
    {
        Players = new List<GameAccount>
        {
            //Додавання початкових даних
            new GameAccount("player1", "1234"),
            new GameAccount("player2", "1234"),
            new GameAccount("player3", "1234"),
            new GameAccount("player4", "1234")
        };

        Games = new List<Game>
        {
            
        };
    }
}       


напиши метод щоб зіграти гру для поточного користувача на рівні сервісу з такою логікою:
private void PlayGame()
    {
        while (true)
        {
            Console.Clear();
            DisplayBoard();
            Console.WriteLine($"Помилки: {errorCount}/{MaxErrors}");

            if (errorCount >= MaxErrors)
            {
                Console.WriteLine("Ви програли! Перевищено кількість помилок.");
                break;
            }

            if (IsBoardFull())
            {
                Console.WriteLine("Вітаємо! Ви завершили судоку.");
                break;
            }

            Console.Write("Введіть рядок (1-9): ");
            int row = int.Parse(Console.ReadLine()) - 1;

            Console.Write("Введіть стовпець (1-9): ");
            int col = int.Parse(Console.ReadLine()) - 1;

            Console.Write("Введіть число (1-9): ");
            int num = int.Parse(Console.ReadLine());

            if (IsMoveValid(row, col, num))
            {
                board[row, col] = num;
            }
            else
            {
                Console.WriteLine("Хід недійсний. Спробуйте знову.");
                errorCount++; // Збільшення лічильника помилок
                Console.ReadKey();
            }
        }
    }
